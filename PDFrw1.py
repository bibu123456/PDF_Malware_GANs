import pdfrw

def build_tree(obj, depth=0, max_depth=10):
    """Recursively build a tree representation of the PDF object."""
    if depth > max_depth:
        return " " * depth + "<Maximum depth reached>\n"

    indent = " " * depth
    tree_str = ""

    if isinstance(obj, pdfrw.PdfDict):
        tree_str += indent + "PdfDict:\n"
        for key, val in obj.items():
            tree_str += indent + f" {key}: "
            tree_str += build_tree(val, depth + 1, max_depth)
    elif isinstance(obj, pdfrw.PdfArray):
        tree_str += indent + "PdfArray:\n"
        for item in obj:
            tree_str += build_tree(item, depth + 1, max_depth)
    elif isinstance(obj, pdfrw.PdfObject):
        tree_str += indent + f"PdfObject: {obj}\n"
    else:
        tree_str += indent + f"{obj}\n"

    return tree_str

def parse_pdf_to_tree(pdf_path, max_depth=10):
    """Parse a PDF and return its tree representation."""
    pdf = pdfrw.PdfReader(pdf_path)
    return build_tree(pdf, max_depth=max_depth)

# Replace with your actual PDF file path
pdf_path = './malicious-pdf/test1.pdf'
tree_representation = parse_pdf_to_tree(pdf_path)

# Optionally, print or save the tree representation
print(tree_representation)
